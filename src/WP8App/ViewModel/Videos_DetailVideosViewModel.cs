// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   	ViewModel.tt
// Version:		2.0
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls = WPAppStudio.Controls;
using Entities = WPAppStudio.Entities;
using EntitiesBase = WPAppStudio.Entities.Base;
using IServices = WPAppStudio.Services.Interfaces;
using IViewModels = WPAppStudio.ViewModel.Interfaces;
using Localization = WPAppStudio.Localization;
using Repositories = WPAppStudio.Repositories;
using Services = WPAppStudio.Services;
using ViewModelsBase = WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of Videos_DetailVideos ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class Videos_DetailVideosViewModel : ViewModelsBase.VMBase, IViewModels.IVideos_DetailVideosViewModel, ViewModelsBase.INavigable
    {       

		private readonly Repositories.Videos_s5 _videos_s5;
		private readonly IServices.IDialogService _dialogService;
		private readonly IServices.INavigationService _navigationService;
		private readonly IServices.ISpeechService _speechService;
		private readonly IServices.IShareService _shareService;
		private readonly IServices.ILiveTileService _liveTileService;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="Videos_DetailVideosViewModel" /> class.
        /// </summary>
        /// <param name="videos_s5">The Videos_s5.</param>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="speechService">The Speech Service.</param>
        /// <param name="shareService">The Share Service.</param>
        /// <param name="liveTileService">The Live Tile Service.</param>
        public Videos_DetailVideosViewModel(Repositories.Videos_s5 videos_s5, IServices.IDialogService dialogService, IServices.INavigationService navigationService, IServices.ISpeechService speechService, IServices.IShareService shareService, IServices.ILiveTileService liveTileService)
        {
			_videos_s5 = videos_s5;
			_dialogService = dialogService;
			_navigationService = navigationService;
			_speechService = speechService;
			_shareService = shareService;
			_liveTileService = liveTileService;
        }
		
	
		private EntitiesBase.YouTubeVideo _currentYouTubeVideo;

        /// <summary>
        /// CurrentYouTubeVideo property.
        /// </summary>		
        public EntitiesBase.YouTubeVideo CurrentYouTubeVideo
        {
            get
            {
				return _currentYouTubeVideo;
            }
            set
            {
                SetProperty(ref _currentYouTubeVideo, value);
            }
        }
	
		private bool _hasNextpanoramaVideos_DetailVideos0;

        /// <summary>
        /// HasNextpanoramaVideos_DetailVideos0 property.
        /// </summary>		
        public bool HasNextpanoramaVideos_DetailVideos0
        {
            get
            {
				return _hasNextpanoramaVideos_DetailVideos0;
            }
            set
            {
                SetProperty(ref _hasNextpanoramaVideos_DetailVideos0, value);
            }
        }
	
		private bool _hasPreviouspanoramaVideos_DetailVideos0;

        /// <summary>
        /// HasPreviouspanoramaVideos_DetailVideos0 property.
        /// </summary>		
        public bool HasPreviouspanoramaVideos_DetailVideos0
        {
            get
            {
				return _hasPreviouspanoramaVideos_DetailVideos0;
            }
            set
            {
                SetProperty(ref _hasPreviouspanoramaVideos_DetailVideos0, value);
            }
        }

        /// <summary>
        /// Delegate method for the TextToSpeechVideos_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void TextToSpeechVideos_DetailVideosStaticControlCommandDelegate() 
        {
				_speechService.TextToSpeech(CurrentYouTubeVideo.Title);
        }
		

        private ICommand _textToSpeechVideos_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the TextToSpeechVideos_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand TextToSpeechVideos_DetailVideosStaticControlCommand
        {
            get { return _textToSpeechVideos_DetailVideosStaticControlCommand = _textToSpeechVideos_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(TextToSpeechVideos_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the ShareVideos_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void ShareVideos_DetailVideosStaticControlCommandDelegate() 
        {
				_shareService.Share(CurrentYouTubeVideo.Title, "", CurrentYouTubeVideo.ExternalUrl, CurrentYouTubeVideo.VideoId);
        }
		

        private ICommand _shareVideos_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the ShareVideos_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand ShareVideos_DetailVideosStaticControlCommand
        {
            get { return _shareVideos_DetailVideosStaticControlCommand = _shareVideos_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(ShareVideos_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the PinToStartVideos_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void PinToStartVideos_DetailVideosStaticControlCommandDelegate() 
        {
				_liveTileService.PinToStart(typeof(IViewModels.IVideos_DetailVideosViewModel), CreateTileInfoVideos_DetailVideosStaticControl());
        }
		

        private ICommand _pinToStartVideos_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the PinToStartVideos_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand PinToStartVideos_DetailVideosStaticControlCommand
        {
            get { return _pinToStartVideos_DetailVideosStaticControlCommand = _pinToStartVideos_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(PinToStartVideos_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the GoToSourceVideos_DetailVideosStaticControlCommand command.
        /// </summary>
        public  void GoToSourceVideos_DetailVideosStaticControlCommandDelegate() 
        {
				_navigationService.NavigateTo(string.IsNullOrEmpty(CurrentYouTubeVideo.ExternalUrl) ? null : new Uri(CurrentYouTubeVideo.ExternalUrl));
        }
		

        private ICommand _goToSourceVideos_DetailVideosStaticControlCommand;

        /// <summary>
        /// Gets the GoToSourceVideos_DetailVideosStaticControlCommand command.
        /// </summary>
        public ICommand GoToSourceVideos_DetailVideosStaticControlCommand
        {
            get { return _goToSourceVideos_DetailVideosStaticControlCommand = _goToSourceVideos_DetailVideosStaticControlCommand ?? new ViewModelsBase.DelegateCommand(GoToSourceVideos_DetailVideosStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the NextpanoramaVideos_DetailVideos0 command.
        /// </summary>
        public async void NextpanoramaVideos_DetailVideos0Delegate() 
        {
				LoadingCurrentYouTubeVideo = true;
			var next = await  _videos_s5.Next(CurrentYouTubeVideo);

			if(next != null)
				CurrentYouTubeVideo = next;

			RefreshHasPrevNext();
        }
		
		
        private bool _loadingCurrentYouTubeVideo;
		
        public bool LoadingCurrentYouTubeVideo
        {
            get { return _loadingCurrentYouTubeVideo; }
            set { SetProperty(ref _loadingCurrentYouTubeVideo, value); }
        }

        private ICommand _nextpanoramaVideos_DetailVideos0;

        /// <summary>
        /// Gets the NextpanoramaVideos_DetailVideos0 command.
        /// </summary>
        public ICommand NextpanoramaVideos_DetailVideos0
        {
            get { return _nextpanoramaVideos_DetailVideos0 = _nextpanoramaVideos_DetailVideos0 ?? new ViewModelsBase.DelegateCommand(NextpanoramaVideos_DetailVideos0Delegate); }
        }

        /// <summary>
        /// Delegate method for the PreviouspanoramaVideos_DetailVideos0 command.
        /// </summary>
        public  void PreviouspanoramaVideos_DetailVideos0Delegate() 
        {
			var prev =  _videos_s5.Previous(CurrentYouTubeVideo);

			if(prev != null)
				CurrentYouTubeVideo = prev;

			RefreshHasPrevNext();
        }
		

        private ICommand _previouspanoramaVideos_DetailVideos0;

        /// <summary>
        /// Gets the PreviouspanoramaVideos_DetailVideos0 command.
        /// </summary>
        public ICommand PreviouspanoramaVideos_DetailVideos0
        {
            get { return _previouspanoramaVideos_DetailVideos0 = _previouspanoramaVideos_DetailVideos0 ?? new ViewModelsBase.DelegateCommand(PreviouspanoramaVideos_DetailVideos0Delegate); }
        }

        private async void RefreshHasPrevNext()
        {
            HasPreviouspanoramaVideos_DetailVideos0 = _videos_s5.HasPrevious(CurrentYouTubeVideo);
			HasNextpanoramaVideos_DetailVideos0 = await _videos_s5.HasNext(CurrentYouTubeVideo);
			LoadingCurrentYouTubeVideo = false;
		}
		public object NavigationContext
        {
            set
            {              
                if (!(value is EntitiesBase.YouTubeVideo)) { return; }
                
                CurrentYouTubeVideo = value as EntitiesBase.YouTubeVideo;
                RefreshHasPrevNext();
            }
        }
        /// <summary>
        /// Initializes a <see cref="Services.TileInfo" /> object for the Videos_DetailVideosStaticControl control.
        /// </summary>
		/// <returns>A <see cref="Services.TileInfo" /> object.</returns>
        public Services.TileInfo CreateTileInfoVideos_DetailVideosStaticControl()
        {
            var tileInfo = new Services.TileInfo
            {
                CurrentId = CurrentYouTubeVideo.VideoId,
                Title = CurrentYouTubeVideo.Title,
                BackTitle = CurrentYouTubeVideo.Title,
                BackContent = string.Empty,
                Count = 0,
                BackgroundImagePath = CurrentYouTubeVideo.VideoImageUrl,
                BackBackgroundImagePath = CurrentYouTubeVideo.VideoImageUrl,
                LogoPath = "DoWApp-Logo.png"
            };
            return tileInfo;
        }
    }
}
